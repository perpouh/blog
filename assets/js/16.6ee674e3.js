(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{262:function(l,e,o){"use strict";o.r(e);var r=o(28),n=Object(r.a)({},(function(){var l=this,e=l.$createElement,o=l._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[o("ul",[o("li",[l._v("nodeのインストール")]),l._v(" "),o("li",[l._v("HelloWorld")]),l._v(" "),o("li",[l._v("ノンブロッキングな処理を書く")])]),l._v(" "),o("h2",{attrs:{id:"nodeのインストール"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#nodeのインストール"}},[l._v("#")]),l._v(" nodeのインストール")]),l._v(" "),o("p",[l._v("インストールは"),o("a",{attrs:{href:"http://nodejs.org/",target:"_blank",rel:"noopener noreferrer"}},[l._v("Node.js公式"),o("OutboundLink")],1),l._v("から行ってください。"),o("br"),l._v("\n正しくインストールできると、コマンドラインからnodeコマンドが利用できるようになります。"),o("br"),l._v(" "),o("code",[l._v("node -v")]),l._v("と入力してバージョン情報が返ってくればインストールはOKです。\n※当方Macbookで作業してますのでwinのことはよくわかりません")]),l._v(" "),o("h2",{attrs:{id:"helloworld"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#helloworld"}},[l._v("#")]),l._v(" HelloWorld")]),l._v(" "),o("p",[l._v("早速nodeを書きます。")]),l._v(" "),o("div",{staticClass:"language-hello.js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[l._v('console.log("Hello,World!!");  \n')])])]),o("p",[l._v("これだけ。\nあとはコマンドラインから\n"),o("code",[l._v(">node hello.js")]),o("br"),l._v("\nという形で実行してやると、ターミナルにHello,World!!が表示されますヽ(´@ω@｀)ﾉ")]),l._v(" "),o("h2",{attrs:{id:"ノンブロッキングな処理を書く"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ノンブロッキングな処理を書く"}},[l._v("#")]),l._v(" ノンブロッキングな処理を書く")]),l._v(" "),o("p",[l._v("node.jsはスレッドモデル（一つの処理に一つのスレッドを使う）ではなく、イベントループ（一つのスレッドで処理を全て捌く）を用いています。"),o("br"),l._v("\nスレッドモデルとイベントループについての説明は、長くなりそうかつ本旨から外れるので割愛。代表的なところだと、Apacheがスレッドモデルでnginxがイベントループを採用しています。")]),l._v(" "),o("p",[l._v("このイベントループを途中で止めない(forループなどを使うとその処理のために次の動作に移れない(＝ブロックされてしまう))ために、node.jsではコールバック関数を用います。")]),l._v(" "),o("h3",{attrs:{id:"ブロッキングな処理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ブロッキングな処理"}},[l._v("#")]),l._v(" ブロッキングな処理")]),l._v(" "),o("p",[l._v("※日本語がどうとかいう話は取り敢えず今はなしで")]),l._v(" "),o("div",{staticClass:"language-blocking_hello.js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[l._v('for(var i=0;i<10;i++){\n  console.log("Hello");\n}\nconsole.log("World");\n')])])]),o("p",[l._v("上記の通りだと、forループが終わるまでWorldが表示されません。これがブロッキングな処理、forループが処理を止めてしまう状態になります。")]),l._v(" "),o("p",[l._v("結果"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nWorld")]),l._v(" "),o("h3",{attrs:{id:"ノンブロッキングな処理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ノンブロッキングな処理"}},[l._v("#")]),l._v(" ノンブロッキングな処理")]),l._v(" "),o("div",{staticClass:"language-nonblocking_hello.js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[l._v('setTimeout(function(){\n   for(var i=0;i<10;i++){\n     console.log("Hello");\n  }\n},0);\nconsole.log("World");\n')])])]),o("p",[l._v("コールバック関数を使って上記の書き方をすると、forループが次の処理を止めずに済みます。")]),l._v(" "),o("p",[l._v("結果"),o("br"),l._v("\nWorld"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello"),o("br"),l._v("\nHello")]),l._v(" "),o("p",[l._v("…なぜ10回Helloを出したかって、Helloの間にWorldが入ってきたら処理順序が見えやすくなるかなと思ったからだったんですが、目論見が外れました。THE無意味。というか認識が間違っているんでしょうか。")]),l._v(" "),o("p",[l._v("今回はここまでヽ(´@ω@｀)ﾉ"),o("br"),l._v("\n作成ファイルはgithubにアップロードしていますので、もしよければ見てみてください。"),o("br"),l._v(" "),o("a",{attrs:{href:"https://github.com/perpouh/node_sample",target:"_blank",rel:"noopener noreferrer"}},[l._v("node_sample - github (架空会社ぱあぷう)"),o("OutboundLink")],1)]),l._v(" "),o("p",[l._v("しかしドットインストール、一回一回短いのはいいけど早口なのはちょっと聞き取りにくいですね……")])])}),[],!1,null,null,null);e.default=n.exports}}]);